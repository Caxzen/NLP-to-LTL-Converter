nlp_statements,ltl_formulas
Reach the destination.,F(destination)
Always stay on the path and reach the goal.,G(path) ^ F(goal)
Eventually hit the target.,F(target)
The user should always be notified if the system is idle.,G(idle -> notify_user)
Always log errors that occur.,G(log_error)
"If the user presses the button, then the light should turn on.",G(button_pressed -> light_on)
Notify user if system fails.,G(failure -> notify_user)
Ensure data is backed up.,G(backup_data)
The system should log actions taken.,G(log_action)
User must authenticate before accessing data.,G(authenticate -> access_data)
Provide access if authorized.,G(authorized -> provide_access)
Log user activities continuously.,G(log_activity)
Notify user after task completion.,G(task_completion -> notify_user)
System should always alert the admin if an error occurs.,G(error -> alert_admin)
"If the user submits a form, then display a success message.",G(form_submitted -> display_success)
Monitor system health continuously.,G(monitor_health)
Log all changes made to the configuration.,G(log_configuration_changes)
The system must encrypt user data.,G(encrypt(user_data))
Track user interactions for analytics.,G(track_interactions)
Notify user about scheduled maintenance.,G(maintenance_schedule -> notify_user)
Ensure that user passwords are stored securely.,G(secure_password_storage)
Backup user data daily.,G(daily_backup)
Monitor the network for unauthorized access.,G(monitor_network -> unauthorized_access)
"If an update is available, notify the user.",G(update_available -> notify_user)
Log significant events for audit purposes.,G(significant_events -> log)
Provide support when the user requests assistance.,G(request_assistance -> provide_support)
The system should display an error message when invalid input is detected.,G(invalid_input -> display_error)
Automatically log out users after a period of inactivity.,G(inactivity -> auto_logout)
Always check for software updates regularly.,G(software_updates -> check)
Notify user when their account is accessed from a new device.,G(new_device_access -> notify_user)
Users should be prompted to change their password every 90 days.,G(password_change -> prompt_user)
Always validate data before processing.,G(validate_data_before_processing)
The system should record all transactions.,G(log_transactions)
"If the server goes down, alert the admin immediately.",G(server_down -> alert_admin)
Notify users of changes to privacy policies.,G(privacy_policy_changes -> notify_user)
Log any attempts to access restricted data.,G(restricted_data_access -> log_attempt)
"If the user opts out, ensure their data is deleted.",G(opt_out -> delete_data)
Track system performance metrics continuously.,G(track_performance_metrics)
Notify when system resources are running low.,G(low_resources -> notify)
The system should validate user credentials before granting access.,G(validate_credentials -> grant_access)
Users must confirm their identity before resetting passwords.,G(password_reset -> confirm_identity)
Always notify users when their session is about to expire.,G(session_expiry -> notify_user)
Log all user login attempts.,G(login_attempts -> log)
The system should automatically handle user data requests.,G(user_data_requests -> auto_handle)
Notify users when data processing is complete.,G(data_processing_complete -> notify_user)
"If a security breach is detected, notify the relevant personnel.",G(security_breach -> notify_personnel)
Always use secure protocols for data transmission.,G(data_transmission -> secure_protocols)
Provide clear error messages to users.,G(clear_error_messages)
Log user preferences for future reference.,G(log_user_preferences)
"If the service is interrupted, inform users immediately.",G(service_interruption -> inform_users)
The system should automatically archive old records.,G(archive_old_records)
Always verify backup integrity after completion.,G(backup_integrity -> verify)
Notify users of important system updates.,G(important_updates -> notify_user)
Users should be allowed to view their activity logs.,G(activity_logs -> viewable)
"If the user reports an issue, log it for follow-up.",G(issue_reported -> log_for_follow_up)
The system must comply with data protection regulations.,G(data_protection_compliance)
Automatically update software components when necessary.,G(software_components -> auto_update)
Notify admin of system performance anomalies.,G(system_anomalies -> notify_admin)
"If the user requests a report, generate it automatically.",G(report_request -> auto_generate)
Log any changes to user roles and permissions.,G(user_roles_changes -> log)
Provide users with a way to opt-out of data collection.,G(data_collection_opt_out -> provide_option)
Always authenticate requests before processing.,G(authenticate_requests)
"If the application crashes, log the error for analysis.",G(application_crash -> log_error)
Notify users when their account is about to expire.,G(account_expiry -> notify_user)
Ensure that sensitive data is anonymized.,G(sensitive_data -> anonymize)
Always use two-factor authentication for critical actions.,G(two_factor_authentication -> critical_actions)
"If a user account is compromised, lock it immediately.",G(compromised_account -> lock)
Provide users with clear instructions for account recovery.,G(account_recovery -> clear_instructions)
Log any changes made to user settings.,G(user_settings_changes -> log)
Always inform users about their data rights.,G(user_data_rights -> inform_user)
Track system uptime and downtime statistics.,G(system_uptime_statistics)
Notify users of potential phishing attempts.,G(suspicious_activity -> notify_user)
"If the user’s profile is incomplete, prompt them to update it.",G(profile_incomplete -> prompt_update)
Log interactions with customer support.,G(customer_support_interactions -> log)
Automatically log out users after 15 minutes of inactivity.,G(inactivity -> auto_logout)
Notify users of scheduled downtimes for maintenance.,G(scheduled_downtimes -> notify_user)
Ensure that all user data is encrypted at rest.,G(user_data -> encrypt_at_rest)
"If a new device is used, send an alert to the user.",G(new_device_used -> send_alert)
Provide users with a secure method to share sensitive information.,G(share_sensitive_info -> secure_method)
Log all API requests for auditing.,G(api_requests -> log)
Notify users of any suspicious activity on their account.,G(suspicious_activity -> notify_user)
"If a user reports a bug, log it for review.",G(bug_reported -> log_for_review)
Provide users with a dashboard to monitor their activity.,G(user_dashboard -> monitor_activity)
Always perform security audits at regular intervals.,G(security_audits -> perform_regularly)
Notify users when their session is about to time out.,G(session_time_out -> notify_user)
Track all user-generated content for moderation.,G(user_generated_content -> track)
Automatically save user preferences.,G(user_preferences -> auto_save)
Ensure that all communications are encrypted.,G(all_communications -> encrypt)
Notify users of updates to the terms of service.,G(terms_of_service_updates -> notify_user)
Log any unusual login patterns.,G(unusual_login_patterns -> log)
"If a payment fails, notify the user immediately.",G(payment_failed -> notify_user)
Provide users with a way to report issues.,G(issue_reporting -> provide_method)
Always validate form submissions on the server side.,G(form_submission -> validate_server)
Notify users when changes are made to their account.,G(account_changes -> notify_user)
Ensure that backup processes are scheduled regularly.,G(backup_processes -> scheduled)
"If a system vulnerability is found, patch it immediately.",G(system_vulnerability -> patch)
"At some point, if the door is open, the temperature will increase.",F(door_open→F(temperature_increase))
Provide detailed logs for troubleshooting.,G(troubleshooting_logs -> provide_detailed)
"Whenever the user clicks, the action will be performed.",G(click→action_performed)
"If the user has not responded, remind them until they do.",F(alert_user until they respond)
Avoid obstacles and reach the goal safely.,G(!obstacle) ^ F(goal)
Always avoid cars and eventually reach the parking spot.,G(!car) ^ F(parking_spot)
Always follow the road and reach the traffic light.,G(road) ^ F(traffic_light)
Always avoid pedestrians and reach the crosswalk.,G(!pedestrian) ^ F(crosswalk)
Eventually stop at the traffic light.,F(traffic_light)
Always stay within the lane and avoid accidents.,G(lane) ^ G(!accident)
Turn right and eventually reach the gas station.,F(turn_right) ^ F(gas_station)
Always stay on the sidewalk and avoid construction zones.,G(sidewalk) ^ G(!construction_zone)
Keep moving and eventually reach the store.,F(store)
Always avoid potholes and reach the destination on time.,G(!pothole) ^ F(destination_on_time)
Always stay on the main road and eventually reach the exit.,G(main_road) ^ F(exit)
Avoid traffic and eventually reach the destination.,G(!traffic) ^ F(destination)
Always stop at red lights and eventually reach the office.,G(stop_at_red_light) ^ F(office)
Always avoid sharp turns and reach the final checkpoint.,G(!sharp_turn) ^ F(final_checkpoint)
Eventually enter the building and avoid the security alarm.,F(building) ^ G(!security_alarm)
Stay within the speed limit and eventually reach the bridge.,G(speed_limit) ^ F(bridge)
Always avoid collisions and eventually reach the exit gate.,G(!collision) ^ F(exit_gate)
Always stay on the marked path and avoid pedestrians.,G(marked_path) ^ G(!pedestrian)
Reach the safe zone without triggering any alarms.,F(safe_zone) ^ G(!alarm)
Always follow the safety protocol and reach the end point.,G(safety_protocol) ^ F(end_point)
Eventually park the car in the designated spot.,F(park_in_spot)
Always avoid roadblocks and eventually reach the town center.,G(!roadblock) ^ F(town_center)
Always follow the guardrail and eventually reach the tunnel.,G(guardrail) ^ F(tunnel)
Stay on the designated route and reach the base camp.,G(route) ^ F(base_camp)
Always stay clear of debris and reach the safe zone.,G(!debris) ^ F(safe_zone)
Eventually turn left at the junction and avoid traffic.,F(turn_left) ^ G(!traffic)
Always avoid obstacles and reach the charging station.,G(!obstacle) ^ F(charging_station)
Always follow the trail and eventually reach the summit.,G(trail) ^ F(summit)
Keep the vehicle moving and eventually stop at the checkpoint.,F(checkpoint)
Always stay in the designated lane and avoid roadblocks.,G(lane) ^ G(!roadblock)
Eventually reach the emergency exit and avoid the fire zones.,F(emergency_exit) ^ G(!fire_zone)
Always maintain a safe distance and eventually reach the finish line.,G(safe_distance) ^ F(finish_line)
Avoid slippery roads and eventually reach the shelter.,G(!slippery_road) ^ F(shelter)
Always stay on the marked lanes and eventually reach the exit ramp.,G(marked_lanes) ^ F(exit_ramp)
Avoid narrow streets and eventually reach the main avenue.,G(!narrow_street) ^ F(main_avenue)
Always follow the route and eventually reach the fuel station.,G(route) ^ F(fuel_station)
Always stop for pedestrians and eventually reach the school.,G(stop_for_pedestrians) ^ F(school)
Always obey traffic lights and eventually reach the hospital.	,G(traffic_lights) ^ F(hospital)
Avoid roadblocks and eventually turn right at the intersection.,G(!roadblock) ^ F(turn_right)
Eventually reach the bus stop without taking a detour.,F(bus_stop) ^ G(!detour)
Always avoid distractions and eventually park at the garage.,G(!distraction) ^ F(garage)
Always stay alert and eventually reach the drop-off point.,G(alert) ^ F(drop_off_point)
Always avoid pedestrians and eventually reach the entrance gate.,G(!pedestrian) ^ F(entrance_gate)
Avoid intersections and eventually reach the landmark.,G(!intersection) ^ F(landmark)
Always follow the speed limit and reach the rest stop.,G(speed_limit) ^ F(rest_stop)
Avoid construction zones and eventually reach the parking garage.,G(!construction_zone) ^ F(parking_garage)
Always take the safest route and eventually reach the tower.,G(safe_route) ^ F(tower)
Always avoid roadblocks and reach the stadium.,G(!roadblock) ^ F(stadium)
Always maintain a safe distance and reach the checkpoint.,G(safe_distance) ^ F(checkpoint)
Always follow the road signs and reach the terminal.,G(road_signs) ^ F(terminal)
Always avoid traffic jams and reach the destination.,G(!traffic_jam) ^ F(destination)
Avoid sharp turns and reach the next waypoint.,G(!sharp_turn) ^ F(waypoint)
Always stay on track and eventually reach the summit.,G(on_track) ^ F(summit)
Avoid slippery surfaces and eventually reach the base camp.,G(!slippery_surface) ^ F(base_camp)
Always obey the rules and eventually reach the safe zone.,G(obey_rules) ^ F(safe_zone)
Always follow the path and eventually reach the checkpoint.,G(path) ^ F(checkpoint)
Avoid closed streets and eventually reach the city center.,G(!closed_street) ^ F(city_center)
Always follow the guide and eventually reach the endpoint.,G(guide) ^ F(endpoint)
Always avoid debris and eventually reach the safe house.,G(!debris) ^ F(safe_house)
Always stay in the clear zone and eventually reach the harbor.,G(clear_zone) ^ F(harbor)
Avoid narrow alleys and eventually reach the marketplace.,G(!narrow_alley) ^ F(marketplace)
Always avoid traffic lights and eventually reach the terminal.,G(!traffic_light) ^ F(terminal)
Always follow the lights and eventually reach the cabin.,G(lights) ^ F(cabin)
Always follow the straight path and eventually reach the outpost.,G(straight_path) ^ F(outpost)
Avoid intersections and eventually reach the main road.,G(!intersection) ^ F(main_road)
Always follow the signals and eventually reach the helipad.,G(signals) ^ F(helipad)
Avoid distractions and eventually reach the landing zone.,G(!distraction) ^ F(landing_zone)
Always follow the line markings and eventually reach the destination.,G(line_markings) ^ F(destination)
Always avoid detours and eventually reach the control tower.,G(!detour) ^ F(control_tower)
Always avoid tunnels and eventually reach the main route.,G(!tunnel) ^ F(main_route)
Avoid obstacles and eventually reach the turning point.,G(!obstacle) ^ F(turning_point)
Always follow the course and eventually reach the rest area.,G(course) ^ F(rest_area)
Always stay within the boundaries and eventually reach the warehouse.,G(boundaries) ^ F(warehouse)
Avoid bottlenecks and eventually reach the finish line.,G(!bottleneck) ^ F(finish_line)
Always avoid bridges and eventually reach the secondary route.,G(!bridge) ^ F(secondary_route)
Avoid busy streets and eventually reach the tower entrance.,G(!busy_street) ^ F(tower_entrance)
Always take the shortest path and eventually reach the shelter.,G(shortest_path) ^ F(shelter)
Always avoid intersections and eventually reach the waiting area.,G(!intersection) ^ F(waiting_area)
Always avoid accidents and eventually reach the service station.,G(!accident) ^ F(service_station)
Always stay in the right lane and eventually reach the crossing point.,G(right_lane) ^ F(crossing_point)
Avoid speed bumps and eventually reach the final stop.,G(!speed_bump) ^ F(final_stop)
Always avoid road debris and eventually reach the pier.,G(!road_debris) ^ F(pier)
Avoid pedestrian zones and eventually reach the highway.,G(!pedestrian_zone) ^ F(highway)
Always obey the road markings and eventually reach the service road.,G(road_markings) ^ F(service_road)
Always stay on the highway and eventually reach the checkpoint.,G(highway) ^ F(checkpoint)
Always avoid closed routes and eventually reach the mountain base.,G(!closed_route) ^ F(mountain_base)
Avoid traffic lights and eventually reach the destination.,G(!traffic_light) ^ F(destination)
Always follow the guide and eventually reach the evacuation zone.,G(guide) ^ F(evacuation_zone)
Avoid rough terrain and eventually reach the riverside.,G(!rough_terrain) ^ F(riverside)
Always stay on the highway and reach the toll booth.,G(highway) ^ F(toll_booth)
Avoid traffic jams and reach the rendezvous point.,G(!traffic_jam) ^ F(rendezvous_point)
Always stay in the fast lane and reach the final exit.,G(fast_lane) ^ F(final_exit)
Avoid sharp corners and eventually reach the harbor entrance.,G(!sharp_corner) ^ F(harbor_entrance)
Always stay on the path and eventually reach the final checkpoint.,G(path) ^ F(final_checkpoint)
Avoid the high-speed lane and eventually reach the off-ramp.,G(!high_speed_lane) ^ F(off_ramp)
Always avoid hazards and eventually reach the final destination.,G(!hazard) ^ F(final_destination)
Notify users of important updates.," ""G(update -> notified)"""
Users must not receive irrelevant notifications.," ""G(!irrelevant_notification -> notified)"""
Ensure data is logged at all times.," ""G(log_data)"""
Users should always be informed about system failures.," ""G(failure -> informed)"""
Do not allow access to unauthorized users.," ""G(!authorized_user -> !access)"""
Notify users when updates are available.," ""F(update_available -> notify_users)"""
"If the system is idle, log this activity."," ""G(idle -> log_activity)"""
Users must always receive feedback after an action.," ""G(action -> feedback_received)"""
Do not show error messages for successful operations.," ""G(success -> !show_error)"""
Notify users at least once a day about updates.," ""F(daily -> notify_users)"""
Ensure the system never crashes.," ""G(!crash)"""
Always log errors that occur.," ""G(error -> log_error)"""
Users should not miss any critical alerts.," ""G(!critical_alert -> notified)"""
Notify the admin when a user logs in.," ""F(user_login -> notify_admin)"""
Users can see previous transactions at any time.," ""G(transaction_viewable)"""
Log all user activities continuously.," ""G(user_activity -> log_activity)"""
Ensure important updates are communicated immediately.," ""G(important_update -> communicated)"""
Users must be informed if data is lost.," ""G(data_loss -> informed_users)"""
Do not let any unauthorized access occur.," ""G(!authorized_access -> !permit)"""
Notify users if their session is about to expire.," ""F(session_expiry -> notify_users)"""
Users should receive help whenever they request it.," ""G(help_request -> receive_help)"""
Ensure that updates are applied within 24 hours.," ""F(24_hours -> apply_updates)"""
Do not notify users about non-critical updates.," ""G(!non_critical_update -> !notify)"""
Notify users only during business hours.," ""G(business_hours -> notify_users)"""
Always provide an option to unsubscribe from notifications.," ""G(subscribe -> !unsubscribe)"""
"If a user encounters an error, log it immediately."," ""G(error_encountered -> log_error)"""
Ensure that all reports are generated weekly.," ""F(weekly -> generate_report)"""
Users must be able to access their data anytime.," ""G(data_accessible)"""
Always display a confirmation message for actions.," ""G(action -> confirmation_displayed)"""
Users should receive reminders for important deadlines.," ""G(deadline -> remind_users)"""
Do not allow duplicate entries in the database.," ""G(duplicate_entry -> !allow)"""
Notify users when their password is changed.," ""F(password_change -> notify_user)"""
Ensure compliance with all legal requirements.," ""G(!compliance -> !acceptable)"""
Users must not forget their passwords.," ""G(!forgot_password -> notified)"""
Notify users about upcoming maintenance schedules.," ""F(maintenance_schedule -> notify_users)"""
Do not display warnings for minor issues.," ""G(!minor_issue -> !show_warning)"""
Ensure all forms are submitted by the deadline.," ""G(deadline -> form_submitted)"""
Always provide feedback within 5 minutes.," ""F(5_minutes -> feedback_provided)"""
Users should never receive spam emails.," ""G(!spam_email -> !received)"""
Notify users if their session has expired.," ""F(session_expiry -> notify_user)"""
Always log user preferences.," ""G(user_preference -> log_preference)"""
Notify users about system outages immediately.," ""F(outage -> notify_users)"""
Users must always be able to reset their passwords.," ""G(!reset_password -> !allowed)"""
Ensure data integrity checks are performed regularly.," ""F(check_integrity -> integrity_ok)"""
Users should receive alerts for high-priority tasks.," ""G(high_priority -> notify_users)"""
Do not grant access without proper verification.," ""G(!verification -> !access_granted)"""
Notify users about policy changes promptly.," ""F(policy_change -> notify_users)"""
Always encrypt sensitive user data.," ""G(sensitive_data -> encrypted)"""
Users must always log out after use.," ""G(active -> logged_out)"""
Notify users if a feature is deprecated.," ""F(deprecation -> notify_users)"""
Ensure all transactions are logged.," ""G(transaction -> logged)"""
Users must be able to opt-out of notifications.," ""G(opt_out -> !notify)"""
Notify admins when storage limits are reached.," ""F(storage_limit -> notify_admin)"""
Users should always have access to help documentation.," ""G(!help_documentation -> !accessible)"""
Always validate input fields before submission.," ""G(input_field -> valid)"""
Notify users when their account is created.," ""F(account_creation -> notify_users)"""
Do not allow changes without confirmation.," ""G(change -> confirmed)"""
Ensure users can recover their accounts.," ""G(!account_recovery -> !allowed)"""
Always show progress indicators for long tasks.," ""G(long_task -> show_progress)"""
Users must be informed about their privacy rights.," ""G(privacy_rights -> informed)"""
Notify users of any new features.," ""F(new_feature -> notify_users)"""
Do not process requests without user consent.," ""G(!user_consent -> !process_request)"""
Ensure all sessions are logged for security reasons.," ""G(session -> logged)"""
Notify users when they exceed their quota.," ""F(quota_exceeded -> notify_users)"""
Always ask for confirmation before deleting.," ""G(delete_action -> confirmed)"""
Ensure the system operates under normal conditions.," ""G(!normal_conditions -> !alert_admin)"""
Notify users if their input is invalid.," ""F(invalid_input -> notify_users)"""
Users must never share their passwords.," ""G(!shared_password -> !allowed)"""
Always backup user data regularly.," ""G(user_data -> backed_up)"""
Notify users when a new version is available.," ""F(new_version -> notify_users)"""
Do not send notifications during downtime.," ""G(downtime -> !notify_users)"""
Ensure user feedback is collected regularly.," ""G(feedback_collected -> !skipped)"""
Notify users when their request is processed.," ""F(request_processed -> notify_users)"""
Always display the last login time.," ""G(user_logged_in -> last_login_time)"""
Users should not experience downtime.," ""G(!downtime -> operational)"""
Ensure all communications are encrypted.," ""G(communication -> encrypted)"""
Notify users of changes to their account status.," ""F(account_status_change -> notify_users)"""
Do not allow multiple sessions for the same user.," ""G(multiple_sessions -> !allowed)"""
Ensure all alerts are sent in real-time.," ""G(alert -> sent_in_real_time)"""
Notify users if a payment fails.," ""F(payment_failed -> notify_users)"""
Users must be able to view their transaction history.," ""G(transaction_history -> accessible)"""
Always log user logins.," ""G(user_login -> logged)"""
Notify users of any system upgrades.," ""F(system_upgrade -> notify_users)"""
Do not allow any unauthorized changes to settings.," ""G(!authorized_change -> !allowed)"""
Ensure the application runs smoothly.," ""G(!smooth_running -> !alert_admin)"""
Notify users when a system error occurs.," ""F(system_error -> notify_users)"""
Always provide a way to contact support.," ""G(contact_support -> accessible)"""
Users must be notified about data breaches.," ""F(data_breach -> notify_users)"""
Do not allow any malicious activity on the platform.," ""G(!malicious_activity -> !allowed)"""
Ensure all forms are accessible to users.," ""G(form_accessible -> !restricted)"""
Notify users when their subscription is about to expire.," ""F(subscription_expiry -> notify_users)"""
Always prompt users to verify their email.," ""G(email_verification -> prompted)"""
Users should never feel overwhelmed by notifications.," ""G(overwhelmed_by_notifications -> !allowed)"""
Notify users when their profile is updated.," ""F(profile_update -> notify_users)"""
Do not permit any data sharing without consent.," ""G(!consent -> !data_sharing)"""
Ensure users have a seamless experience.," ""G(!seamless_experience -> !alert_admin)"""
Notify users when their feedback is implemented.," ""F(feedback_implemented -> notify_users)"""
Always validate user input to prevent errors.," ""G(user_input -> validated)"""
Users must be able to update their preferences easily.," ""G(preferences_update -> easy)"""
Do not send promotional emails without user consent.," ""G(!user_consent -> !promote)"""
Ensure that support is available during business hours.," ""G(business_hours -> support_available)"""
Notify users of system maintenance beforehand.," ""F(system_maintenance -> notify_users)"""
Always give users the option to report issues.," ""G(report_issue -> accessible)"""
Users should never be denied access to their data.," ""G(!access_denied -> !allowed)"""
Notify users if there is an update to terms and conditions.," ""F(terms_update -> notify_users)"""
Do not allow changes to user settings without verification.," ""G(!settings_verification -> !allowed)"""
Ensure that important alerts are prioritized.," ""G(important_alert -> prioritized)"""
Notify users if their settings have been changed.," ""F(settings_changed -> notify_users)"""
Always log changes made to user accounts.," ""G(account_change -> logged)"""
Users must be notified of any changes to policies.," ""F(policy_change -> notify_users)"""
Do not allow any unauthorized users to view sensitive information.," ""G(!authorized_user -> !allowed)"""
Ensure the system is regularly updated for security.," ""G(!updated_security -> !alert_admin)"""
Notify users when their feedback is needed.," ""F(feedback_needed -> notify_users)"""
Always provide options to customize user experience.," ""G(customization_options -> available)"""
Users should not receive excessive alerts.," ""G(excessive_alerts -> !allowed)"""
Notify users if their account is flagged for review.," ""F(account_flagged -> notify_users)"""
Do not permit sharing of sensitive information through public channels.," ""G(!public_channel -> !sensitive_sharing)"""
Ensure that user sessions are secure.," ""G(!secure_session -> !alert_admin)"""
Notify users if they are logged out due to inactivity.," ""F(logged_out_inactivity -> notify_users)"""
Always inform users about the status of their requests.," ""G(request_status -> informed)"""
Users must be able to access their data across devices.," ""G(data_accessible -> across_devices)"""
Do not allow unauthorized access to user accounts.," ""G(!authorized_access -> !allowed)"""
Ensure that all user actions are logged for security.," ""G(action -> logged)"""
Notify users of any new updates to the application.," ""F(application_update -> notify_users)"""
Always ask users for feedback after using the application.," ""G(feedback_request -> asked)"""
Users should be able to view their recent activity.," ""G(recent_activity -> viewable)"""
Notify users when there are changes in account policies.," ""F(account_policy_change -> notify_users)"""
Do not send users unsolicited marketing messages.," ""G(!unsolicited_marketing -> !allowed)"""
Ensure users are aware of their data rights.," ""G(data_rights -> informed)"""
Notify users if there are any security threats.," ""F(security_threat -> notify_users)"""
Always validate user permissions before granting access.," ""G(user_permission -> validated)"""
Users must be notified if their accounts are compromised.," ""F(account_compromise -> notify_users)"""
Do not allow any suspicious activities on the platform.," ""G(!suspicious_activity -> !allowed)"""
Ensure the system performs optimally at all times.," ""G(!optimal_performance -> !alert_admin)"""
Notify users of significant changes to the service.," ""F(service_change -> notify_users)"""
Always keep users informed about system updates.," ""G(system_update -> informed)"""
Users should never miss critical updates.," ""G(!critical_update -> notified)"""
Notify users when their subscription is about to renew.," ""F(subscription_renewal -> notify_users)"""
Do not allow data to be shared without user consent.," ""G(!consent -> !data_sharing)"""
Ensure all software is up to date to prevent vulnerabilities.," ""G(!up_to_date -> !alert_admin)"""
Notify users of any pending actions they need to take.," ""F(pending_action -> notify_users)"""
Always provide clear instructions for users.," ""G(instructions -> clear)"""
Users must be informed about their rights and responsibilities.," ""G(rights_responsibilities -> informed)"""
Do not allow any alterations to be made without user consent.," ""G(!user_consent -> !alterations_allowed)"""
Ensure users have the ability to manage their notifications.," ""G(notification_management -> available)"""
Notify users when their feedback leads to changes.," ""F(feedback_leads_to_change -> notify_users)"""
Always display security warnings when needed.," ""G(need_security_warning -> displayed)"""
Users should be able to report problems easily.," ""G(report_problem -> easy)"""
Notify users of system performance issues.," ""F(performance_issue -> notify_users)"""
Do not permit access to sensitive areas without proper credentials.," ""G(!proper_credentials -> !allowed)"""
Ensure that users are trained to use the system effectively.," ""G(training_provided -> effective_use)"""
Notify users about maintenance downtime in advance.," ""F(downtime -> notify_users)"""
Always ensure that user data is kept private.," ""G(data_privacy -> ensured)"""
Users must be notified when their data is about to be deleted.," ""F(data_deletion -> notify_users)"""
Do not allow users to submit incomplete forms.," ""G(incomplete_form -> !allowed)"""
Ensure all communications with users are logged.," ""G(communication -> logged)"""
Notify users about new policies affecting their accounts.," ""F(policy_change -> notify_users)"""
Always inform users about the benefits of system updates.," ""G(system_update_benefits -> informed)"""
Users should never be subjected to unwanted surveillance.," ""G(!consent -> !surveillance)"""
Notify users when there is a change in their account status.," ""F(account_status_change -> notify_users)"""
Do not permit users to share their credentials.," ""G(!credentials_sharing -> !allowed)"""
Ensure all system alerts are acknowledged.," ""G(alert -> acknowledged)"""
Notify users about significant security updates.," ""F(security_update -> notify_users)"""
Always provide a way to opt-out of data collection.," ""G(opt_out_data_collection -> available)"""
Users must be informed about their rights to data access.," ""G(rights_to_data_access -> informed)"""
Do not allow users to access the system from unsecured networks.," ""G(!secured_network -> !allowed)"""
Ensure that the help system is always accessible.," ""G(help_system_accessible -> true)"""
Notify users of any changes to the terms of service.," ""F(terms_change -> notify_users)"""
Always validate user identity during sensitive operations.," ""G(sensitive_operation -> validated)"""
Users should have the ability to customize their settings.," ""G(customize_settings -> available)"""
Notify users of changes to their subscription plans.," ""F(subscription_plan_change -> notify_users)"""
Do not permit any unauthorized changes to user data.," ""G(!authorized_change -> !allowed)"""
Ensure that user feedback is collected systematically.," ""G(feedback_collection -> systematic)"""
Notify users when their device is not secure.," ""F(device_not_secure -> notify_users)"""
Always keep users informed about service outages.," ""G(service_outage -> informed)"""
Users must be aware of the consequences of their actions.," ""G(actions_consequences -> informed)"""
Do not allow users to make changes without confirmation.," ""G(!change_confirmation -> !allowed)"""
Ensure that security policies are reviewed regularly.," ""G(security_policy -> reviewed)"""
Notify users of critical updates to the platform.," ""F(critical_update -> notify_users)"""
Always provide users with the option to change their passwords.," ""G(password_change_option -> available)"""
Users must be informed about the data retention policy.," ""G(data_retention_policy -> informed)"""
Do not allow sharing of accounts between users.," ""G(!account_sharing -> !allowed)"""
Ensure that user permissions are reviewed periodically.," ""G(user_permissions -> reviewed)"""
Notify users of upcoming software releases.," ""F(software_release -> notify_users)"""
Always maintain logs of user activities.," ""G(user_activity -> logged)"""
Users should be made aware of potential risks.," ""G(potential_risks -> informed)"""
Notify users when their account is flagged for unusual activity.," ""F(account_flagged -> notify_users)"""
Do not allow any unauthorized modifications to the codebase.," ""G(!authorized_modification -> !allowed)"""
Ensure that all communications are secure and encrypted.," ""G(communication_security -> ensured)"""
Notify users about any new features that enhance security.," ""F(new_security_feature -> notify_users)"""
Always provide users with access to their logs.," ""G(log_accessible -> true)"""
Users must be informed if there are changes to the privacy policy.," ""F(privacy_policy_change -> notify_users)"""
Do not allow any unauthorized users to access the admin panel.," ""G(!authorized_user -> !allowed)"""
Ensure that system backups are performed regularly.," ""G(backup_performed -> regular)"""
Notify users of any detected vulnerabilities.," ""F(vulnerability_detected -> notify_users)"""
Always offer users the ability to provide feedback.," ""G(feedback_option -> available)"""
Users must not engage in prohibited activities on the platform.," ""G(!prohibited_activity -> !allowed)"""
Do not permit any unverified users to access sensitive information.," ""G(!verified_user -> !allowed)"""
Ensure that security updates are applied promptly.," ""G(security_update -> applied_promptly)"""
Notify users when their feedback is being reviewed.," ""F(feedback_review -> notify_users)"""
Always provide a clear process for users to report issues.," ""G(report_process -> clear)"""
Users must be notified when their data is shared with third parties.," ""F(data_shared -> notify_users)"""
Do not allow any modifications to be made without a change log.," ""G(!change_log -> !allowed)"""
Ensure that all user data is handled in compliance with regulations.," ""G(data_handling -> compliant)"""
Notify users of any significant changes to features.," ""F(feature_change -> notify_users)"""
Always ask users for confirmation before important changes.," ""G(important_change -> confirmed)"""
Users should receive alerts when there are updates.," ""G(update_alert -> notified)"""
Notify users when the system is down for maintenance.," ""F(system_down -> notify_users)"""
Do not allow users to access the platform with outdated credentials.," ""G(!up_to_date_credentials -> !allowed)"""
Ensure that the user interface is intuitive and easy to navigate.," ""G(user_interface -> intuitive)"""
Notify users of their responsibilities regarding data security.," ""F(data_security_responsibility -> notify_users)"""
Always display a help option for users.," ""G(help_option -> available)"""
Users must be informed when they have new messages.," ""F(new_message -> notify_users)"""
Do not allow any unauthorized installations on user devices.," ""G(!authorized_installation -> !allowed)"""
Ensure that updates are communicated to users regularly.," ""G(update_communication -> regular)"""
Notify users if their profile information is incomplete.," ""F(incomplete_profile -> notify_users)"""
Always keep user information confidential.," ""G(confidentiality -> maintained)"""
Users should not have to search for help resources.," ""G(!help_resources -> !search)"""
Notify users when their access is modified.," ""F(access_modified -> notify_users)"""
Do not permit any data leaks from the system.," ""G(!data_leak -> !allowed)"""
Ensure that system performance metrics are reported.," ""G(performance_metrics_reported -> true)"""
Notify users about any potential phishing attempts.," ""F(phishing_attempt -> notify_users)"""
Always provide training resources for users.," ""G(training_resources -> available)"""
Users must receive alerts for unusual account activities.," ""G(unusual_activity -> alerted)"""
Do not allow unauthorized access to sensitive documents.," ""G(!authorized_access -> !allowed)"""
Ensure that all critical updates are documented.," ""G(critical_updates -> documented)"""
Notify users when there are changes to the user agreement.," ""F(user_agreement_change -> notify_users)"""
Always allow users to access their personal data.," ""G(personal_data_accessible -> true)"""
Users must be informed of their rights regarding data access.," ""G(data_access_rights -> informed)"""
Do not allow unauthorized software to run on user devices.," ""G(!authorized_software -> !allowed)"""
Ensure that user privacy is prioritized.," ""G(user_privacy -> prioritized)"""
Notify users when they are about to exceed their data limits.," ""F(data_limit_exceeded -> notify_users)"""
Always offer users a way to provide suggestions.," ""G(suggestions_option -> available)"""
Users should never be locked out of their accounts.," ""G(!account_lockout -> !allowed)"""
Notify users when they have new account notifications.," ""F(account_notification -> notify_users)"""
Do not allow any fraudulent activities on the platform.," ""G(!fraudulent_activity -> !allowed)"""
Ensure that all third-party integrations are secure.," ""G(third_party_integration -> secure)"""
Notify users if there are any detected security breaches.," ""F(security_breach -> notify_users)"""
Always provide users with resources for account recovery.," ""G(account_recovery_resources -> available)"""
Users must be informed of their obligations regarding data protection.," ""G(data_protection_obligations -> informed)"""
Do not permit any unauthorized data access or sharing.," ""G(!authorized_access -> !allowed)"""
NLP Statement,LTL Formula
Notify users about system updates.," ""G(update -> notify)"""
Users should never see an error message.," ""G(!error -> !show)"""
Always log user activities.," ""G(activity -> log)"""
Users must confirm actions before proceeding.," ""G(action -> confirm)"""
Do not allow access after hours.," ""G(after_hours -> !access)"""
Users should receive alerts for critical changes.," ""G(critical_change -> alert)"""
Ensure data is backed up daily.," ""G(daily -> backup(data))"""
Always keep the interface responsive.," ""G(response_time < threshold -> responsive)"""
Users should be informed about downtime.," ""G(downtime -> inform(users))"""
Never allow unauthorized access.," ""G(!authorized -> !access)"""
Users must be prompted to save changes.," ""G(change -> prompt_save)"""
Maintain a log of all user inputs.," ""G(input -> log(input))"""
Notify administrators of failed login attempts.," ""G(failed_login -> notify(admins))"""
Data should always be encrypted in transit.," ""G(in_transit -> encrypt(data))"""
Do not permit multiple sessions for one user.," ""G(multiple_sessions -> !allow)"""
Always display error messages clearly.," ""G(error -> display(clearly))"""
Ensure the system is always up to date.," ""G(!up_to_date -> update)"""
Never allow users to bypass authentication.," ""G(bypass_auth -> !allow)"""
Users should always have a help option available.," ""G(!help -> available)"""
Notify users before performing maintenance.," ""G(maintenance -> notify(users))"""
Always validate user input.," ""G(input -> validate)"""
Ensure logs are retained for at least a year.," ""G(retain(logs) -> duration >= 1 year)"""
Users should always have the option to log out.," ""G(!logout -> available)"""
Do not allow data deletion without confirmation.," ""G(delete_data -> confirm)"""
Always track user sessions.," ""G(session -> track)"""
Notify users when their account is accessed from a new device.," ""G(new_device_access -> notify(users))"""
Do not display sensitive information in error messages.," ""G(error_message -> !sensitive_info)"""
Users should receive periodic updates.," ""G(periodic_update -> notify(users))"""
Always confirm before deleting an account.," ""G(delete_account -> confirm)"""
Ensure the backup system is operational.," ""G(!backup_system -> operational)"""
Do not allow modifications without proper authorization.," ""G(modify -> authorized)"""
Always require strong passwords.," ""G(!strong_password -> !allow)"""
Notify users of system changes.," ""G(system_change -> notify(users))"""
Always provide an option to cancel operations.," ""G(operation -> cancel_option)"""
Do not allow access to confidential files without clearance.," ""G(confidential_file -> clearance_required)"""
Ensure the system supports multi-factor authentication.," ""G(!multi_factor -> support)"""
Notify users when their password is changed.," ""G(password_change -> notify(users))"""
Always log out users after inactivity.," ""G(inactivity -> logout)"""
Users must acknowledge terms and conditions before proceeding.," ""G(terms -> acknowledge)"""
Ensure all software components are patched.," ""G(!patched -> patch(software))"""
Do not allow access to admin features for regular users.," ""G(admin_features -> !allow_regular_users)"""
Always keep user interfaces consistent.," ""G(!consistent_ui -> update_ui)"""
Notify users of any security breaches.," ""G(security_breach -> notify(users))"""
Users should not share their passwords.," ""G(password_shared -> !allow)"""
Always provide feedback for user actions.," ""G(action -> feedback)"""
Ensure user data is anonymized for analytics.," ""G(analytics -> anonymize(user_data))"""
Do not allow file uploads without scanning.," ""G(file_upload -> scan)"""
Always validate user email addresses.," ""G(email -> validate)"""
Notify users of any new features.," ""G(new_feature -> notify(users))"""
Users should not disable security features.," ""G(security_feature_disabled -> !allow)"""
Always enforce role-based access control.," ""G(!role_based_access -> enforce)"""
Do not allow modifications to system settings by unauthorized users.," ""G(system_settings_modify -> !allow_unauthorized)"""
Notify users before their session expires.," ""G(session_expiration -> notify(users))"""
Always monitor system performance.," ""G(!performance_acceptable -> monitor)"""
Users must receive confirmations for purchases.," ""G(purchase -> confirm(users))"""
Ensure all access logs are secure.," ""G(access_logs -> secure)"""
Do not allow changes to sensitive configurations without approval.," ""G(sensitive_config_change -> approval_required)"""
Always check for software updates.," ""G(!software_update -> check)"""
Notify users of changes to privacy policies.," ""G(privacy_policy_change -> notify(users))"""
Users should not be able to change their usernames.," ""G(username_change -> !allow)"""
Always provide users with the ability to recover their passwords.," ""G(!password_recovery -> allow)"""
Ensure that the firewall is always enabled.," ""G(!firewall_enabled -> enable)"""
Notify users if their account will be deactivated.," ""G(account_deactivation -> notify(users))"""
Always provide a clear explanation for errors.," ""G(error -> explanation)"""
Users should receive notifications for new messages.," ""G(new_message -> notify(users))"""
Do not allow changes to user roles without approval.," ""G(user_role_change -> approval_required)"""
Always validate email formats.," ""G(email_format -> validate)"""
Ensure that all communication is encrypted.," ""G(!encrypted_comm -> encrypt)"""
Notify users about subscription renewals.," ""G(subscription_renewal -> notify(users))"""
Users must accept cookies before using the service.," ""G(!cookies_accepted -> !allow)"""
Always provide access to user support.," ""G(!support_access -> allow)"""
Do not allow repeated login attempts without a timeout.," ""G(repeated_login_attempts -> timeout)"""
Notify users if their session has been logged out.," ""G(session_logout -> notify(users))"""
Always require re-authentication for sensitive actions.," ""G(sensitive_action -> re_authenticate)"""
Users should not be able to share their accounts.," ""G(account_shared -> !allow)"""
Ensure that all outgoing emails are logged.," ""G(outgoing_email -> log)"""
Do not allow bypassing of security checks.," ""G(security_check_bypassed -> !allow)"""
Notify users when their profiles are updated.," ""G(profile_update -> notify(users))"""
Always provide an option to view logs.," ""G(!view_logs -> allow)"""
Ensure all data inputs are validated.," ""G(data_input -> validate)"""
Users must confirm identity before changing settings.," ""G(setting_change -> confirm_identity)"""
Always maintain backups of critical data.," ""G(!backup_critical -> maintain_backup)"""
Do not allow access to resources without permissions.," ""G(resource_access -> permission_required)"""
Notify users when their password is about to expire.," ""G(password_expiry -> notify(users))"""
Always require unique usernames.," ""G(!unique_username -> !allow)"""
Ensure all software is compliant with standards.," ""G(!compliant_software -> comply)"""
Notify users about the end of service for their accounts.," ""G(account_end_of_service -> notify(users))"""
Users should not be able to disable logging.," ""G(logging_disabled -> !allow)"""
Always encrypt sensitive user data.," ""G(sensitive_user_data -> encrypt)"""
Ensure that all transactions are secure.," ""G(!secure_transaction -> secure)"""
Notify users when they reach storage limits.," ""G(storage_limit_reached -> notify(users))"""
Always provide an option to change passwords.," ""G(!password_change_option -> allow)"""
Do not allow modifications to logs after they are created.," ""G(logs_modified -> !allow)"""
Notify users if their accounts have been accessed.," ""G(account_accessed -> notify(users))"""
Always perform regular security audits.," ""G(!security_audit -> perform)"""
Ensure that all sessions are logged out after inactivity.," ""G(inactivity -> logout)"""
Do not allow changes to the database without backups.," ""G(database_change -> backup_required)"""
Notify users of any suspicious activities.," ""G(suspicious_activity -> notify(users))"""
Always provide access to system documentation.," ""G(!documentation_access -> allow)"""
Users must report any system errors immediately.," ""G(system_error -> report(users))"""
Ensure that user feedback is regularly reviewed.," ""G(feedback_reviewed -> review)"""
Do not allow access to financial information without clearance.," ""G(financial_info_access -> clearance_required)"""
Notify users of any upcoming maintenance.," ""G(upcoming_maintenance -> notify(users))"""
Always validate phone numbers during registration.," ""G(phone_number_validation -> validate)"""
Ensure that the audit trail is preserved.," ""G(!audit_trail_preserved -> preserve)"""
Notify users when their two-factor authentication is set up.," ""G(two_factor_setup -> notify(users))"""
Users should not be able to modify their roles.," ""G(role_modification -> !allow)"""
Always provide an option for users to log feedback.," ""G(!feedback_option -> allow)"""
Do not allow sharing of sensitive documents without approval.," ""G(sensitive_document_shared -> approval_required)"""
Notify users when their sessions expire.," ""G(session_expiry -> notify(users))"""
Always check user roles before granting access.," ""G(access_granted -> check_roles)"""
Ensure that all API requests are authenticated.," ""G(!authenticated_api_request -> authenticate)"""
Notify users about changes to terms of service.," ""G(terms_change -> notify(users))"""
Users should not be able to delete their accounts directly.," ""G(account_deletion -> !allow)"""
Always log actions taken by administrators.," ""G(admin_action -> log)"""
Ensure user notifications are enabled.," ""G(!notifications_enabled -> enable)"""
Notify users when updates are available.," ""G(available_updates -> notify(users))"""
Users must verify their emails after registration.," ""G(email_verification -> verify)"""
Always provide clear instructions for using the system.," ""G(!clear_instructions -> provide)"""
Do not allow users to bypass the onboarding process.," ""G(onboarding_bypassed -> !allow)"""
Notify users if their contact information changes.," ""G(contact_info_change -> notify(users))"""
Always maintain a record of all communications.," ""G(!communication_recorded -> record)"""
Ensure that software complies with licensing agreements.," ""G(!license_compliance -> comply)"""
Notify users about the status of their requests.," ""G(request_status_change -> notify(users))"""
Users should not disable security notifications.," ""G(security_notifications_disabled -> !allow)"""
Always provide access to historical data.," ""G(!historical_data_access -> allow)"""
Do not allow changes to permissions without logging.," ""G(permissions_changed -> log)"""
Notify users when they have unread messages.," ""G(unread_messages -> notify(users))"""
Always enforce data retention policies.," ""G(!data_retention_enforced -> enforce)"""
Ensure that software is tested for vulnerabilities.," ""G(!vulnerable_software -> test)"""
Notify users when their feedback is addressed.," ""G(feedback_addressed -> notify(users))"""
Users must not share their passwords with anyone.," ""G(password_shared -> !allow)"""
Always provide options for customizing user preferences.," ""G(!customization_option -> allow)"""
Do not allow unauthorized access to databases.," ""G(database_access -> !allow)"""
Notify users if their actions trigger alerts.," ""G(alert_triggered -> notify(users))"""
Always provide an option to revert changes.," ""G(!revert_option -> allow)"""
Ensure that updates are thoroughly tested before release.," ""G(!thoroughly_tested_update -> test)"""
Notify users when their accounts are suspended.," ""G(account_suspended -> notify(users))"""
Users should not be able to change the system settings.," ""G(system_settings_change -> !allow)"""
Always monitor the network for unusual activities.," ""G(!network_monitoring -> monitor)"""
Ensure all systems are regularly backed up.," ""G(!backed_up_systems -> backup)"""
Notify users if their actions are logged.," ""G(action_logged -> notify(users))"""
Users must confirm their identity before making changes.," ""G(changes -> confirm_identity)"""
Always provide users with the latest information.," ""G(!latest_info -> provide)"""
Do not allow unauthorized changes to configuration files.," ""G(config_file_change -> !allow)"""
Notify users of all security alerts.," ""G(security_alert -> notify(users))"""
Always validate the data before processing.," ""G(data_processing -> validate)"""
Ensure that all users have access to support.," ""G(!support_access -> allow)"""
Notify users if their preferences are not saved.," ""G(preferences_not_saved -> notify(users))"""
Always provide users with an option to update their information.," ""G(!update_option -> allow)"""
Do not allow access to critical systems without clearance.," ""G(critical_system_access -> clearance_required)"""
Notify users if there are any issues with their accounts.," ""G(account_issues -> notify(users))"""
Always monitor for any unauthorized access attempts.," ""G(!unauthorized_access_attempt -> monitor)"""
Ensure that user permissions are regularly reviewed.," ""G(!permissions_reviewed -> review)"""
Notify users when their passwords are changed.," ""G(password_changed -> notify(users))"""
Users should not share their login credentials.," ""G(credentials_shared -> !allow)"""
Always provide an option for users to delete their accounts.," ""G(!account_deletion_option -> allow)"""
Do not allow changes to payment information without verification.," ""G(payment_info_change -> verify)"""
Notify users if their subscriptions are about to expire.," ""G(subscription_expiry -> notify(users))"""
Always maintain accurate records of user activity.," ""G(!activity_recorded -> maintain)"""
Ensure that all users complete the onboarding process.," ""G(!onboarding_complete -> complete)"""
Notify users about their account status.," ""G(account_status_change -> notify(users))"""
Users must receive confirmations for account changes.," ""G(account_change -> confirm(users))"""
Always provide an option to view privacy settings.," ""G(!privacy_settings_view -> allow)"""
Do not allow modifications to user roles without consent.," ""G(user_role_modification -> consent_required)"""
Notify users of upcoming training sessions.," ""G(training_session_upcoming -> notify(users))"""
Always ensure that the software complies with regulations.," ""G(!regulations_complied -> comply)"""
Ensure that all third-party applications are vetted.," ""G(!vetted_apps -> vet)"""
Notify users if their contact information is incorrect.," ""G(contact_info_incorrect -> notify(users))"""
Users should not disable automatic updates.," ""G(automatic_updates_disabled -> !allow)"""
Always log changes made to sensitive information.," ""G(sensitive_info_change -> log)"""
Ensure that all system notifications are clear.," ""G(!clear_notifications -> allow)"""
Notify users when they reach usage limits.," ""G(usage_limit_reached -> notify(users))"""
Users must acknowledge receipt of important communications.," ""G(important_communication -> acknowledge)"""
Always provide an option to view usage statistics.," ""G(!usage_statistics_view -> allow)"""
Do not allow changes to user profiles without verification.," ""G(user_profile_change -> verify)"""
Notify users when they have new alerts.," ""G(new_alerts -> notify(users))"""
Always enforce the policy of least privilege.," ""G(!least_privilege_enforced -> enforce)"""
Ensure that all users have unique identifiers.," ""G(!unique_identifier -> allow)"""
Notify users if their actions are restricted.," ""G(action_restricted -> notify(users))"""
Users should not be able to change the email associated with their accounts.," ""G(email_change -> !allow)"""
Always provide an option to report issues.," ""G(!issue_report_option -> allow)"""
Do not allow modifications to access controls without approval.," ""G(access_control_change -> approval_required)"""
Notify users when their files are uploaded successfully.," ""G(file_uploaded -> notify(users))"""
Always maintain backups of all configurations.," ""G(!config_backup -> maintain_backup)"""
Ensure that the system is compliant with security standards.," ""G(!security_standards_compliant -> comply)"""
Notify users when their devices are connected.," ""G(device_connected -> notify(users))"""
Users must agree to terms of use before accessing services.," ""G(!terms_agreed -> !allow)"""
Always provide clear guidance on system usage.," ""G(!guidance_provided -> provide)"""
Do not allow unauthorized changes to user settings.," ""G(user_setting_change -> !allow)"""
Notify users of changes in ownership of data.," ""G(data_ownership_change -> notify(users))"""
Always validate the source of data inputs.," ""G(data_input_source -> validate)"""
Ensure that all user actions are recorded.," ""G(!user_action_recorded -> record)"""
Notify users if they are at risk of data loss.," ""G(data_loss_risk -> notify(users))"""
Users should not disable security features on their accounts.," ""G(security_feature_disabled -> !allow)"""
Always provide options for restoring deleted data.," ""G(!data_restoration_option -> allow)"""
Do not allow sensitive data to be transmitted unencrypted.," ""G(sensitive_data_transmitted -> !allow)"""
Notify users when their requests are fulfilled.," ""G(request_fulfilled -> notify(users))"""
Always monitor for compliance with data protection regulations.," ""G(!compliance_monitored -> monitor)"""
Ensure that all user feedback is acted upon.," ""G(!feedback_actioned -> action)"""
Notify users if their sessions are about to time out.," ""G(session_timeout -> notify(users))"""
Users must provide consent for data collection.," ""G(!data_collection_consent -> !allow)"""
Always offer support for troubleshooting issues.," ""G(!support_offered -> allow)"""
Do not allow changes to system architecture without assessment.," ""G(system_architecture_change -> assessment_required)"""
Notify users when they are required to change their passwords.," ""G(password_change_required -> notify(users))"""
Always provide access to system audits.," ""G(!audit_access -> allow)"""
Ensure that all access to sensitive data is logged.," ""G(sensitive_data_access -> log)"""
Notify users about service outages in advance.," ""G(service_outage -> notify(users))"""
Users should not be able to override security settings.," ""G(security_setting_overridden -> !allow)"""
Always provide training on security best practices.," ""G(!security_training_provided -> provide)"""
Ensure that all employees understand the data handling policies.," ""G(!data_handling_policy_understood -> understand)"""
Notify users if their data is being processed.," ""G(data_processed -> notify(users))"""
Users must authenticate before accessing restricted areas.," ""G(restricted_area_access -> authenticate)"""
Always ensure that customer support is available.," ""G(!support_available -> provide)"""
Do not allow access to data without logging.," ""G(data_accessed -> log)"""
Notify users when they are granted new permissions.," ""G(new_permissions_granted -> notify(users))"""
Always provide clear information on how to escalate issues.," ""G(!escalation_info_provided -> provide)"""
Ensure that no unauthorized personnel have access to sensitive data.," ""G(unauthorized_access -> !allow)"""
Notify users about any updates to software they use.," ""G(software_update -> notify(users))"""
Users must agree to the privacy policy before registration.," ""G(!privacy_policy_agreed -> !allow)"""
Always provide a method for users to track their data.," ""G(!data_tracking_method -> provide)"""
Do not allow changes to user profiles without notification.," ""G(profile_change -> notify(users))"""
Notify users when there is a significant update in service.," ""G(significant_update -> notify(users))"""
Always maintain the integrity of user data.," ""G(!data_integrity -> maintain)"""
Ensure that all transactions are secure and verified.," ""G(!secure_transaction -> verify)"""
Notify users when they reach their account limits.," ""G(account_limit_reached -> notify(users))"""
Users should not be able to disable account recovery options.," ""G(account_recovery_disabled -> !allow)"""
Always provide training on how to use new features.," ""G(!new_feature_training_provided -> provide)"""
Do not allow unauthorized modifications to critical settings.," ""G(critical_setting_modified -> !allow)"""
Notify users if their data is shared with third parties.," ""G(data_shared_with_third_parties -> notify(users))"""
Always validate any external data sources.," ""G(external_data_source -> validate)"""
Ensure that all data backups are encrypted.," ""G(!encrypted_backup -> encrypt)"""
Notify users when changes to policies occur.," ""G(policy_change -> notify(users))"""
Users must confirm their identity when making changes.," ""G(change -> confirm_identity)"""
Always provide a method for users to give feedback.," ""G(!feedback_method -> allow)"""
Do not allow sharing of personal information without consent.," ""G(personal_info_shared -> !allow)"""
Notify users when system maintenance is scheduled.," ""G(system_maintenance_scheduled -> notify(users))"""
Ensure that all user requests are processed promptly.," ""G(!requests_processed -> process)"""
Notify users when their payment methods are updated.," ""G(payment_method_updated -> notify(users))"""
Users should not disable alerts for important notifications.," ""G(alerts_disabled -> !allow)"""
Always provide an option to view transaction history.," ""G(!transaction_history_view -> allow)"""
Do not allow changes to system configurations without approval.," ""G(system_configuration_change -> approval_required)"""
Notify users if their subscriptions are about to lapse.," ""G(subscription_lapse -> notify(users))"""
Always maintain logs of user activity for security purposes.," ""G(!user_activity_logged -> maintain)"""
Ensure that all system features are documented.," ""G(!features_documented -> document)"""
Notify users when their access permissions are changed.," ""G(access_permission_change -> notify(users))"""
Users must accept updates to terms of service.," ""G(!terms_accepted -> !allow)"""
Always provide users with access to training materials.," ""G(!training_materials_access -> allow)"""
Do not allow unauthorized access to sensitive data.," ""G(sensitive_data_accessed -> !allow)"""
Notify users of any service interruptions.," ""G(service_interruption -> notify(users))"""
Always ensure that users have unique identifiers.," ""G(!unique_identifier_required -> enforce)"""
Ensure that all changes to user roles are documented.," ""G(user_role_change -> document)"""
Notify users when their files are successfully shared.," ""G(file_shared_successfully -> notify(users))"""
Always provide an option for users to delete their data.," ""G(!data_deletion_option -> allow)"""
Do not allow access to sensitive files without proper clearance.," ""G(sensitive_file_access -> clearance_required)"""
Notify users when their requests are processed.," ""G(request_processed -> notify(users))"""
Ensure that user feedback is acted upon.," ""G(!feedback_actioned -> action)"""
Users should not be able to disable account recovery options.," ""G(account_recovery)"""
